// --- Advanced Feature Models ---

model JournalEntry {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String?
  title       String
  body        String
  type        String   // e.g., 'in-app', 'push', 'system'
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  relatedEntityId   String?
  relatedEntityType String?

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model LocationLog {
  id          String   @id @default(uuid())
  userId      String
  latitude    Float
  longitude   Float
  accuracy    Float?
  timestamp   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ImageUpload {
  id          String   @id @default(uuid())
  userId      String
  url         String
  fileName    String?
  fileType    String?
  uploadedAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FcmToken {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  deviceInfo  String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// Training and Enrollment
model Training {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments TrainingEnrollment[]
}

model TrainingEnrollment {
  id         String   @id @default(uuid())
  trainingId String
  userId     String
  status     String   @default("PENDING")
  enrolledAt DateTime @default(now())

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ENUMS REMOVED FOR SQLITE COMPATIBILITY
// model fields that used enums are now String

// MODELS
model User {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  passwordHash      String
  role              String   @default("EMPLOYEE")
  firstName         String
  lastName          String
  profilePictureUrl String?
  phone             String?
  department        String?
  joinDate          DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  dailyWorkReports     DailyWorkReport[]
  leaveRequests        LeaveRequest[]
  attendanceRecords    AttendanceRecord[]
  billingRecords       BillingRecord[]
  sentMessages         InternalMessage[]     @relation("Sender")
  billingRecordDetails BillingRecordDetail[]
  TrainingEnrollment   TrainingEnrollment[]
}

model Project {
  id               String   @id @default(uuid())
  name             String   @unique
  billingType      String
  ratePerHour      Decimal?
  countMetricLabel String?
  countDivisor     Int?     @default(1)
  countMultiplier  Decimal?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  projectLogItems      ProjectLogItem[]
  billingRecords       BillingRecord[]
  billingRecordDetails BillingRecordDetail[]
}

model DailyWorkReport {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime
  submittedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectLogItems ProjectLogItem[]

  @@unique([userId, date])
}

model ProjectLogItem {
  id                String  @id @default(uuid())
  dailyWorkReportId String
  projectId         String
  projectName       String
  hoursWorked       Decimal
  description       String
  achievedCount     Int?

  dailyWorkReport DailyWorkReport @relation(fields: [dailyWorkReportId], references: [id], onDelete: Cascade)
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Restrict)
}

model LeaveRequest {
  id            String    @id @default(uuid())
  userId        String
  userFirstName String
  userLastName  String
  leaveType     String
  startDate     DateTime
  endDate       DateTime
  reason        String
  status        String    @default("PENDING")
  requestedAt   DateTime
  adminNotes    String?
  resolvedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AttendanceRecord {
  id           String    @id @default(uuid())
  userId       String
  date         DateTime
  clockInTime  DateTime
  clockOutTime DateTime?
  totalHours   Decimal?
  notes        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model BillingRecord {
  id                     String    @id @default(uuid())
  userId                 String
  projectId              String
  projectName            String?
  clientName             String
  hoursBilled            Decimal?
  rateApplied            Decimal?
  calculatedAmount       Decimal
  date                   DateTime
  status                 String    @default("PENDING")
  notes                  String?
  isCountBased           Boolean
  achievedCountTotal     Int?
  countMetricLabelUsed   String?
  formulaUsed            String?
  billingPeriodStartDate DateTime?
  billingPeriodEndDate   DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  details BillingRecordDetail[] @relation("BillingRecordToDetail")
  user    User                  @relation(fields: [userId], references: [id], onDelete: Restrict)
  project Project               @relation(fields: [projectId], references: [id], onDelete: Restrict)
}

model BillingRecordDetail {
  id                         String  @id @default(uuid())
  billingRecordId            String
  userId                     String
  projectId                  String
  projectName                String
  totalAchievedCount         Int
  metricLabel                String
  formulaApplied             String
  calculatedAmountForProject Decimal

  billingRecord BillingRecord @relation("BillingRecordToDetail", fields: [billingRecordId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Restrict)
}

model InternalMessage {
  id                      String   @id @default(uuid())
  senderId                String? // Null for 'SYSTEM'
  senderName              String
  senderProfilePictureUrl String?
  recipientId             String // User.id or 'ALL_USERS'
  content                 String
  timestamp               DateTime
  isRead                  Boolean  @default(false)
  relatedEntityId         String?
  relatedEntityType       String?
  createdAt               DateTime @default(now())
  fileUrl                 String?
  fileName                String?
  fileType                String?

  sender User? @relation("Sender", fields: [senderId], references: [id], onDelete: SetNull)
}

// Company details for setup and management
model Company {
  id        String   @id @default(uuid())
  name      String
  address   String
  contact   String
  email     String
  website   String?
  logoUrl   String?
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
