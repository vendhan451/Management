generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ENUMS REMOVED FOR SQLITE COMPATIBILITY
// model fields that used enums are now String

// MODELS
model User {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  passwordHash      String
  role              String   @default("EMPLOYEE")
  firstName         String
  lastName          String
  profilePictureUrl String?
  phone             String?
  department        String?
  joinDate          DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Existing relationships
  dailyWorkReports     DailyWorkReport[]
  leaveRequests        LeaveRequest[]
  attendanceRecords    AttendanceRecord[]
  billingRecords       BillingRecord[]
  sentMessages         InternalMessage[]     @relation("Sender")
  billingRecordDetails BillingRecordDetail[]
  TrainingEnrollment   TrainingEnrollment[]
  JournalEntry         JournalEntry[]
  Notification         Notification[]
  LocationLog          LocationLog[]
  ImageUpload          ImageUpload[]
  FcmToken             FcmToken[]

  // New Training System relationships
  instructedSessions   TrainingSession[]     @relation("TrainingInstructor")
  trainingEnrollments  TrainingEnrollmentNew[] @relation("TrainingEnrollmentUser")
  approvedEnrollments  TrainingEnrollmentNew[] @relation("TrainingApprover")
  assessmentResults    AssessmentResult[]
  trainingFeedback     TrainingFeedback[]

  // New Journal System relationships
  projectJournalEntries ProjectJournalEntry[]
  acknowledgedErrors   ErrorAlert[]

  // New Notification System relationships
  notificationLogs     NotificationLog[]

  // New Offline Support relationships
  offlineEntries       OfflineEntry[]
}

model Project {
  id               String   @id @default(uuid())
  name             String   @unique
  billingType      String
  ratePerHour      Decimal?
  countMetricLabel String?
  countDivisor     Int?     @default(1)
  countMultiplier  Decimal?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  projectLogItems      ProjectLogItem[]
  billingRecords       BillingRecord[]
  billingRecordDetails BillingRecordDetail[]
  journalEntries       ProjectJournalEntry[] // New relationship
}

model DailyWorkReport {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime
  submittedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectLogItems ProjectLogItem[]

  @@unique([userId, date])
}

model ProjectLogItem {
  id                String  @id @default(uuid())
  dailyWorkReportId String
  projectId         String
  projectName       String
  hoursWorked       Decimal
  description       String
  achievedCount     Int?

  dailyWorkReport DailyWorkReport @relation(fields: [dailyWorkReportId], references: [id], onDelete: Cascade)
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Restrict)
}

model LeaveRequest {
  id            String    @id @default(uuid())
  userId        String
  userFirstName String
  userLastName  String
  leaveType     String
  startDate     DateTime
  endDate       DateTime
  reason        String
  status        String    @default("PENDING")
  requestedAt   DateTime
  adminNotes    String?
  resolvedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AttendanceRecord {
  id           String    @id @default(uuid())
  userId       String
  date         DateTime
  clockInTime  DateTime
  clockOutTime DateTime?
  totalHours   Decimal?
  notes        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model BillingRecord {
  id                     String    @id @default(uuid())
  userId                 String
  projectId              String
  projectName            String?
  clientName             String
  hoursBilled            Decimal?
  rateApplied            Decimal?
  calculatedAmount       Decimal
  date                   DateTime
  status                 String    @default("PENDING")
  notes                  String?
  isCountBased           Boolean
  achievedCountTotal     Int?
  countMetricLabelUsed   String?
  formulaUsed            String?
  billingPeriodStartDate DateTime?
  billingPeriodEndDate   DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  details BillingRecordDetail[] @relation("BillingRecordToDetail")
  user    User                  @relation(fields: [userId], references: [id], onDelete: Restrict)
  project Project               @relation(fields: [projectId], references: [id], onDelete: Restrict)
}

model BillingRecordDetail {
  id                         String  @id @default(uuid())
  billingRecordId            String
  userId                     String
  projectId                  String
  projectName                String
  totalAchievedCount         Int
  metricLabel                String
  formulaApplied             String
  calculatedAmountForProject Decimal

  billingRecord BillingRecord @relation("BillingRecordToDetail", fields: [billingRecordId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Restrict)
}

model InternalMessage {
  id                      String   @id @default(uuid())
  senderId                String? // Null for 'SYSTEM'
  senderName              String
  senderProfilePictureUrl String?
  recipientId             String // User.id or 'ALL_USERS'
  content                 String
  timestamp               DateTime
  isRead                  Boolean  @default(false)
  relatedEntityId         String?
  relatedEntityType       String?
  createdAt               DateTime @default(now())
  fileUrl                 String?
  fileName                String?
  fileType                String?

  sender User? @relation("Sender", fields: [senderId], references: [id], onDelete: SetNull)
}

// Company details for setup and management
model Company {
  id        String   @id @default(uuid())
  name      String
  address   String
  contact   String
  email     String
  website   String?
  logoUrl   String?
  settings  String? // JSON stored as string for SQLite compatibility
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Training and Enrollment
model Training {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments TrainingEnrollment[]
}

model TrainingEnrollment {
  id         String   @id @default(uuid())
  trainingId String
  userId     String
  status     String   @default("PENDING")
  enrolledAt DateTime @default(now())

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Advanced Feature Models ---

model JournalEntry {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String?
  title       String
  body        String
  type        String   // e.g., 'in-app', 'push', 'system'
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  relatedEntityId   String?
  relatedEntityType String?

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model LocationLog {
  id          String   @id @default(uuid())
  userId      String
  latitude    Float
  longitude   Float
  accuracy    Float?
  timestamp   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ImageUpload {
  id          String   @id @default(uuid())
  userId      String
  url         String
  fileName    String?
  fileType    String?
  uploadedAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FcmToken {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  deviceInfo  String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- New Training & Development System Models ---

model TrainingSession {
  id              String   @id @default(uuid())
  title           String
  description     String
  category        String   // 'Onboarding', 'Compliance', 'Technical', 'Soft Skills', 'Leadership'
  format          String   // 'in-person', 'virtual', 'hybrid'
  skillLevel      String   // 'Beginner', 'Intermediate', 'Advanced'
  instructorId    String?  // Internal instructor (User ID) or null for external
  externalInstructor String? // External trainer name
  startDateTime   DateTime
  endDateTime     DateTime
  capacity        Int      @default(20)
  location        String?  // Physical location or virtual meeting link
  materials       String?  // JSON string of material URLs/files
  prerequisites   String?  // Text description of prerequisites
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  instructor      User?    @relation("TrainingInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  enrollments     TrainingEnrollmentNew[]
  assessments     TrainingAssessment[]
  feedback        TrainingFeedback[]
}

model TrainingEnrollmentNew {
  id              String   @id @default(uuid())
  sessionId       String
  userId          String
  status          String   @default("PENDING") // 'PENDING', 'APPROVED', 'REJECTED', 'COMPLETED', 'WAITLISTED'
  enrolledAt      DateTime @default(now())
  approvedBy      String?  // Manager/Admin who approved
  approvedAt      DateTime?
  attendanceStatus String? // 'PRESENT', 'ABSENT', 'PARTIAL'
  completionStatus String? // 'COMPLETED', 'FAILED', 'IN_PROGRESS'
  certificateUrl  String?  // URL to completion certificate
  notes           String?

  session         TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user            User            @relation("TrainingEnrollmentUser", fields: [userId], references: [id], onDelete: Cascade)
  approver        User?           @relation("TrainingApprover", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@unique([sessionId, userId])
}

model TrainingAssessment {
  id          String   @id @default(uuid())
  sessionId   String
  title       String
  questions   String   // JSON string of questions and answers
  passingScore Int     @default(70)
  timeLimit   Int?     // Minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  session     TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  results     AssessmentResult[]
}

model AssessmentResult {
  id           String   @id @default(uuid())
  assessmentId String
  userId       String
  score        Int
  answers      String   // JSON string of user answers
  completedAt  DateTime @default(now())
  passed       Boolean

  assessment   TrainingAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainingFeedback {
  id          String   @id @default(uuid())
  sessionId   String
  userId      String
  rating      Int      // 1-5 scale
  npsScore    Int?     // Net Promoter Score 0-10
  comments    String?
  suggestions String?
  createdAt   DateTime @default(now())

  session     TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
}

// --- Project Journal System Models ---

model ProjectJournalEntry {
  id          String   @id @default(uuid())
  userId      String
  projectId   String
  date        DateTime
  objectIds   String   // Comma-separated Object IDs
  taskType    String   // 'coding', 'testing', 'documentation', etc.
  hoursSpent  Float
  status      String   // 'Finished', 'Pending', 'Error'
  comments    String?  // Optional free text comments
  errorDetails String? // Additional details when status = 'Error'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  errorAlerts ErrorAlert[]

  @@unique([userId, projectId, date, objectIds]) // Prevent duplicate entries
}

model ErrorAlert {
  id              String   @id @default(uuid())
  journalEntryId  String
  adminEmails     String   // Comma-separated admin email addresses
  emailSent       Boolean  @default(false)
  emailSentAt     DateTime?
  acknowledged    Boolean  @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  createdAt       DateTime @default(now())

  journalEntry    ProjectJournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  acknowledger    User?               @relation(fields: [acknowledgedBy], references: [id], onDelete: SetNull)
}

// --- Enhanced Notification System Models ---

model NotificationTemplate {
  id          String   @id @default(uuid())
  type        String   // 'PAYROLL', 'LEAVE_STATUS', 'TRAINING_REMINDER', 'ERROR_REPORT'
  subject     String
  bodyTemplate String  // Template with placeholders like {{employeeName}}
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NotificationLog {
  id          String   @id @default(uuid())
  userId      String?  // Null for admin notifications
  type        String   // Same as NotificationTemplate.type
  subject     String
  body        String
  channel     String   // 'EMAIL', 'PUSH', 'IN_APP'
  status      String   // 'SENT', 'FAILED', 'PENDING'
  sentAt      DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// --- Company Branding & Settings Models ---

model CompanySettings {
  id              String   @id @default(uuid())
  primaryColor    String   @default("#2D5016")
  secondaryColor  String   @default("#4A7C59")
  logoUrl         String?
  missionStatement String?
  welcomeMessage  String?
  officeLatitude  Float?   // For GPS geofencing
  officeLongitude Float?   // For GPS geofencing
  geofenceRadius  Int      @default(500) // Meters
  adminEmails     String?  // Comma-separated admin emails for error alerts
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// --- Client Portal Models ---

model ClientAccess {
  id          String   @id @default(uuid())
  clientName  String
  email       String   @unique
  accessToken String   @unique
  projectIds  String   // Comma-separated project IDs they can access
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- Offline Support Models ---

model OfflineEntry {
  id          String   @id @default(uuid())
  userId      String
  entryType   String   // 'JOURNAL', 'ATTENDANCE', 'WORK_REPORT'
  data        String   // JSON string of the offline entry data
  synced      Boolean  @default(false)
  syncedAt    DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}